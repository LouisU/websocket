


def main():
    from selenium import webdriver
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.common.keys import Keys
    import time
    import platform
    from selenium.common.exceptions import ElementClickInterceptedException
    import os
    import sys
    import json
    import distro

    def run():
        wait = WebDriverWait(browser, 300)
        browser.get('https://ibm.webex.com/join/szjqsong')
        print('Title: %s' % browser.title)
        username = wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="attendeeName"]')))
        username.send_keys('abc')
        email = wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="attendeeEmail"]')))
        email.send_keys('test@test.com')
        a = wait.until(EC.visibility_of_element_located((By.ID, 'div_pmr_thin_join_nocookie')))
        wait2 = WebDriverWait(a, 120)
        b = wait2.until(EC.element_to_be_clickable((By.ID, 'mwx-btn-join-thin-client')))
        b.click()
        start_time = time.time()
        wait.until(EC.title_is('Meeting is in progress...'))
        print('Title: %s' % browser.title)
        browser.switch_to_frame('pbui_iframe')
        #audio = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="oneclick_dlg_content"]/div/div[1]/div[2]/button[2]')))
        #print audio.text
        #audio.click()
        video_select = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="oneclick_dlg_content"]/div/div[1]/div[1]/section[2]/div[1]/div[1]/div/button/span[2]')))
        video_select.click()
        click_select = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="oneclick_dlg_content"]/div/div[1]/div[1]/section[2]/div[1]/div[1]/div/div/ul/li[1]')))
        click_select.click()
       # conn_audio_video.click()
        conn_audio_video = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="oneclick_dlg_content"]/div/div[1]/div[2]/button[1]')))
        conn_audio_video.click()
       # host = wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="pb_layout"]/div[3]/div/div/div/div[1]/div[1]/div/div/div/div[2]/div/div[5]/div/h3/span[3]')))
       # print(host.text)
       # participents = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="plist_control_btn"]')))
       # participents.click()
        end_time = time.time()
        running_time = end_time - start_time
        print('running_time: %s' % running_time)
        time.sleep(600)
        browser.quit()

    options = webdriver.ChromeOptions()
    # options.add_argument("--headless")
    options.add_argument('--no-sandbox')
    options.add_argument('--allow-running-insecure-content')
    # options.add_argument('--disable-popup-blocking')
    options.add_argument('--ignore-certificate-errors')
    options.add_argument('--disable-gpu')
    options.add_argument('window-size=1366,768')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--use-fake-ui-for-media-stream')
    options.add_argument('--use-fake-device-for-media-stream')
    options.add_argument('--use-file-for-fake-audio-capture=/home/pi/webex/testing123.wav')
    options.add_argument('--use-file-for-fake-video-capture=/home/pi/webex/1.mjpeg')
    options.add_experimental_option("prefs", {"profile.default_content_setting_values.media_stream_camera": 1})
    options.add_argument('--ignore-certificate-errors')
    capabilities = webdriver.DesiredCapabilities.CHROME.copy()
    capabilities['acceptSslCerts'] = True
    capabilities['acceptInsecureCerts'] = True
    system_version = distro.linux_distribution()[0]
    linux_version = distro.linux_distribution()[1]
    try:
        if system_version == 'Raspbian GNU/Linux':
            from pyvirtualdisplay import Display
            display = Display(visible=0, size=(800, 600))
            display.start()
            browser = webdriver.Chrome(executable_path='/usr/lib/chromium-browser/chromedriver', options=options, desired_capabilities=capabilities)
            run()
            display.stop()
        elif system_version == 'Darwin' or system_version == 'Windows':
            browser = webdriver.Chrome(options=options, desired_capabilities=capabilities)
            run()
        elif system_version == 'Debian GNU/Linux' or system_version == 'Red Hat Enterprise Linux Server':
            from pyvirtualdisplay import Display
            display = Display(visible=0, size=(800, 600))
            display.start()
            browser = webdriver.Chrome(options=options, desired_capabilities=capabilities)
            run()
            display.stop()
    except Exception as e:
        print(e)
        os.system("sudo kill -9 $(ps -ef|grep chrome|gawk '$0 !~/grep/ {print $2}' |tr -s '/\n' ' ')")

